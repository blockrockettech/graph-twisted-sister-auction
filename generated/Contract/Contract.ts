// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class BidAccepted extends EthereumEvent {
  get params(): BidAccepted__Params {
    return new BidAccepted__Params(this);
  }
}

export class BidAccepted__Params {
  _event: BidAccepted;

  constructor(event: BidAccepted) {
    this._event = event;
  }

  get _round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _timeStamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _param(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _bidder(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class BidderRefunded extends EthereumEvent {
  get params(): BidderRefunded__Params {
    return new BidderRefunded__Params(this);
  }
}

export class BidderRefunded__Params {
  _event: BidderRefunded;

  constructor(event: BidderRefunded) {
    this._event = event;
  }

  get _round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoundFinalised extends EthereumEvent {
  get params(): RoundFinalised__Params {
    return new RoundFinalised__Params(this);
  }
}

export class RoundFinalised__Params {
  _event: RoundFinalised;

  constructor(event: RoundFinalised) {
    this._event = event;
  }

  get _round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _param(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _highestBid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _highestBidder(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  accessControls(): Address {
    let result = super.call("accessControls", []);

    return result[0].toAddress();
  }

  try_accessControls(): CallResult<Address> {
    let result = super.tryCall("accessControls", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  artistFundSplitter(): Address {
    let result = super.call("artistFundSplitter", []);

    return result[0].toAddress();
  }

  try_artistFundSplitter(): CallResult<Address> {
    let result = super.tryCall("artistFundSplitter", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  auctionStartTime(): BigInt {
    let result = super.call("auctionStartTime", []);

    return result[0].toBigInt();
  }

  try_auctionStartTime(): CallResult<BigInt> {
    let result = super.tryCall("auctionStartTime", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  currentRound(): BigInt {
    let result = super.call("currentRound", []);

    return result[0].toBigInt();
  }

  try_currentRound(): CallResult<BigInt> {
    let result = super.tryCall("currentRound", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  highestBidFromRound(param0: BigInt): BigInt {
    let result = super.call("highestBidFromRound", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_highestBidFromRound(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("highestBidFromRound", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  highestBidderFromRound(param0: BigInt): Address {
    let result = super.call("highestBidderFromRound", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_highestBidderFromRound(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("highestBidderFromRound", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  minBid(): BigInt {
    let result = super.call("minBid", []);

    return result[0].toBigInt();
  }

  try_minBid(): CallResult<BigInt> {
    let result = super.tryCall("minBid", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  numOfRounds(): BigInt {
    let result = super.call("numOfRounds", []);

    return result[0].toBigInt();
  }

  try_numOfRounds(): CallResult<BigInt> {
    let result = super.tryCall("numOfRounds", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  roundLengthInSeconds(): BigInt {
    let result = super.call("roundLengthInSeconds", []);

    return result[0].toBigInt();
  }

  try_roundLengthInSeconds(): CallResult<BigInt> {
    let result = super.tryCall("roundLengthInSeconds", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  secondsInADay(): BigInt {
    let result = super.call("secondsInADay", []);

    return result[0].toBigInt();
  }

  try_secondsInADay(): CallResult<BigInt> {
    let result = super.tryCall("secondsInADay", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  twistedTokenCreator(): Address {
    let result = super.call("twistedTokenCreator", []);

    return result[0].toAddress();
  }

  try_twistedTokenCreator(): CallResult<Address> {
    let result = super.tryCall("twistedTokenCreator", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  winningRoundParameter(param0: BigInt): BigInt {
    let result = super.call("winningRoundParameter", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_winningRoundParameter(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("winningRoundParameter", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _accessControls(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _twistedTokenCreator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _artistFundSplitter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _printingFund(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _auctionOwner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _auctionStartTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidCall extends EthereumCall {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _parameter(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class IssueTwistAndPrepNextRoundCall extends EthereumCall {
  get inputs(): IssueTwistAndPrepNextRoundCall__Inputs {
    return new IssueTwistAndPrepNextRoundCall__Inputs(this);
  }

  get outputs(): IssueTwistAndPrepNextRoundCall__Outputs {
    return new IssueTwistAndPrepNextRoundCall__Outputs(this);
  }
}

export class IssueTwistAndPrepNextRoundCall__Inputs {
  _call: IssueTwistAndPrepNextRoundCall;

  constructor(call: IssueTwistAndPrepNextRoundCall) {
    this._call = call;
  }

  get _ipfsHash(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class IssueTwistAndPrepNextRoundCall__Outputs {
  _call: IssueTwistAndPrepNextRoundCall;

  constructor(call: IssueTwistAndPrepNextRoundCall) {
    this._call = call;
  }
}

export class UpdateArtistFundSplitterCall extends EthereumCall {
  get inputs(): UpdateArtistFundSplitterCall__Inputs {
    return new UpdateArtistFundSplitterCall__Inputs(this);
  }

  get outputs(): UpdateArtistFundSplitterCall__Outputs {
    return new UpdateArtistFundSplitterCall__Outputs(this);
  }
}

export class UpdateArtistFundSplitterCall__Inputs {
  _call: UpdateArtistFundSplitterCall;

  constructor(call: UpdateArtistFundSplitterCall) {
    this._call = call;
  }

  get _artistFundSplitter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateArtistFundSplitterCall__Outputs {
  _call: UpdateArtistFundSplitterCall;

  constructor(call: UpdateArtistFundSplitterCall) {
    this._call = call;
  }
}

export class UpdateAuctionStartTimeCall extends EthereumCall {
  get inputs(): UpdateAuctionStartTimeCall__Inputs {
    return new UpdateAuctionStartTimeCall__Inputs(this);
  }

  get outputs(): UpdateAuctionStartTimeCall__Outputs {
    return new UpdateAuctionStartTimeCall__Outputs(this);
  }
}

export class UpdateAuctionStartTimeCall__Inputs {
  _call: UpdateAuctionStartTimeCall;

  constructor(call: UpdateAuctionStartTimeCall) {
    this._call = call;
  }

  get _auctionStartTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateAuctionStartTimeCall__Outputs {
  _call: UpdateAuctionStartTimeCall;

  constructor(call: UpdateAuctionStartTimeCall) {
    this._call = call;
  }
}

export class UpdateNumberOfRoundsCall extends EthereumCall {
  get inputs(): UpdateNumberOfRoundsCall__Inputs {
    return new UpdateNumberOfRoundsCall__Inputs(this);
  }

  get outputs(): UpdateNumberOfRoundsCall__Outputs {
    return new UpdateNumberOfRoundsCall__Outputs(this);
  }
}

export class UpdateNumberOfRoundsCall__Inputs {
  _call: UpdateNumberOfRoundsCall;

  constructor(call: UpdateNumberOfRoundsCall) {
    this._call = call;
  }

  get _numOfRounds(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateNumberOfRoundsCall__Outputs {
  _call: UpdateNumberOfRoundsCall;

  constructor(call: UpdateNumberOfRoundsCall) {
    this._call = call;
  }
}

export class UpdateRoundLengthCall extends EthereumCall {
  get inputs(): UpdateRoundLengthCall__Inputs {
    return new UpdateRoundLengthCall__Inputs(this);
  }

  get outputs(): UpdateRoundLengthCall__Outputs {
    return new UpdateRoundLengthCall__Outputs(this);
  }
}

export class UpdateRoundLengthCall__Inputs {
  _call: UpdateRoundLengthCall;

  constructor(call: UpdateRoundLengthCall) {
    this._call = call;
  }

  get _roundLengthInSeconds(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateRoundLengthCall__Outputs {
  _call: UpdateRoundLengthCall;

  constructor(call: UpdateRoundLengthCall) {
    this._call = call;
  }
}
